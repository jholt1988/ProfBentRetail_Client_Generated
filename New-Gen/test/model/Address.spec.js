/**
 * Professor Bentley Electronics Retail API
 * An ecommerce REST API for a retail electronics store. 
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.profbent);
  }
}(this, function(expect, profbent) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new profbent.Address();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Address', function() {
    it('should create an instance of Address', function() {
      // uncomment below and update the code to test Address
      //var instane = new profbent.Address();
      //expect(instance).to.be.a(profbent.Address);
    });

    it('should have the property addressid (base name: "addressid")', function() {
      // uncomment below and update the code to test the property addressid
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property lineOne (base name: "lineOne")', function() {
      // uncomment below and update the code to test the property lineOne
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property lineTwo (base name: "lineTwo")', function() {
      // uncomment below and update the code to test the property lineTwo
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property zipCode (base name: "zipCode")', function() {
      // uncomment below and update the code to test the property zipCode
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property typeid (base name: "typeid")', function() {
      // uncomment below and update the code to test the property typeid
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property createdOn (base name: "createdOn")', function() {
      // uncomment below and update the code to test the property createdOn
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

    it('should have the property updatedOn (base name: "updatedOn")', function() {
      // uncomment below and update the code to test the property updatedOn
      //var instane = new profbent.Address();
      //expect(instance).to.be();
    });

  });

}));
