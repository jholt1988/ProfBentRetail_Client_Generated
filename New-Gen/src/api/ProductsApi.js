/*
 * Prof Bentley Ecommerce API
 * A Ecommerce API
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Cart} from '../model/Cart';
import {ComponentsparametersproductID} from '../model/ComponentsparametersproductID';
import {Componentsparameterssearchterm} from '../model/Componentsparameterssearchterm';
import {ExtendedErrorModel} from '../model/ExtendedErrorModel';
import {Product} from '../model/Product';

/**
* Products service.
* @module api/ProductsApi
* @version 1.5
*/
export class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback moduleapi/ProductsApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete product record
     * This operation deletes a product record
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/ProductsApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/products/delete/{productID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filterProducts operation.
     * @callback moduleapi/ProductsApi~filterProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get filtered product data
     * This operations gets filtered product data
     * @param {module:api/ProductsApi~filterProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filterProducts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/products/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllProducts operation.
     * @callback moduleapi/ProductsApi~getAllProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cart>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all products
     * This operation retrieves all products data
     * @param {module:api/ProductsApi~getAllProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllProducts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Cart];

      return this.apiClient.callApi(
        '/api/store/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback moduleapi/ProductsApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product record
     * This operation retrieves a product record with matching id
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/ProductsApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/store/products/{productID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postProduct operation.
     * @callback moduleapi/ProductsApi~postProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product record
     * This operation creates a new product record
     * @param {Object} opts Optional parameters
     * @param {module:model/Product} opts.body product to add to system
     * @param {String} opts.id 
     * @param {String} opts.productName 
     * @param {Number} opts.price 
     * @param {String} opts.description 
     * @param {Number} opts.inventoryQuantity 
     * @param {String} opts.category 
     * @param {Boolean} opts.isFeatured 
     * @param {String} opts.vendorId 
     * @param {Array.<Blob>} opts.image 
     * @param {String} opts.unit 
     * @param {Date} opts.createdOn 
     * @param {Date} opts.updatedOn 
     * @param {module:api/ProductsApi~postProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postProduct(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': opts['id'],'productName': opts['productName'],'price': opts['price'],'description': opts['description'],'inventoryQuantity': opts['inventoryQuantity'],'category': opts['category'],'isFeatured': opts['isFeatured'],'vendorId': opts['vendorId'],'image': this.apiClient.buildCollectionParam(opts['image'], 'multi'),'unit': opts['unit'],'createdOn': opts['createdOn'],'updatedOn': opts['updatedOn']
      };

      let authNames = [];
      let contentTypes = ['application/urlencoded', 'application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/store/newproduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchStore operation.
     * @callback moduleapi/ProductsApi~searchStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search records in store
     * This operation allows user to search store records by search term and catergory
     * @param {module:model/Componentsparameterssearchterm} searchterm 
     * @param {String} category 
     * @param {module:api/ProductsApi~searchStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchStore(searchterm, category, callback) {
      
      let postBody = null;
      // verify the required parameter 'searchterm' is set
      if (searchterm === undefined || searchterm === null) {
        throw new Error("Missing the required parameter 'searchterm' when calling searchStore");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling searchStore");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'searchterm': searchterm,'category': category
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback moduleapi/ProductsApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product record
     * This operation updates a product record
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/ProductsApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling updateProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/products/edit/{productID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}