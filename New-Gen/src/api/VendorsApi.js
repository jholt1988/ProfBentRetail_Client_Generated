/*
 * Prof Bentley Ecommerce API
 * A Ecommerce API
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {ComponentsparametersvendorID} from '../model/ComponentsparametersvendorID';
import {ExtendedErrorModel} from '../model/ExtendedErrorModel';
import {Product} from '../model/Product';
import {Vendor} from '../model/Vendor';

/**
* Vendors service.
* @module api/VendorsApi
* @version 1.5
*/
export class VendorsApi {

    /**
    * Constructs a new VendorsApi. 
    * @alias module:api/VendorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteVendor operation.
     * @callback moduleapi/VendorsApi~deleteVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Vendor
     * This operation deletes a vendor records
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/VendorsApi~deleteVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling deleteVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/vendors/delete/{vendorID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllVendors operation.
     * @callback moduleapi/VendorsApi~getAllVendorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vendor>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all vendors
     * This operation gets all vendors data
     * @param {module:api/VendorsApi~getAllVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllVendors(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vendor];

      return this.apiClient.callApi(
        '/api/store/vendors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVendor operation.
     * @callback moduleapi/VendorsApi~getVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vendor 
     * This operation retrieves a vendor record with matching ID
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/VendorsApi~getVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling getVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vendor;

      return this.apiClient.callApi(
        '/api/store/vendors/{vendorID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postVendor operation.
     * @callback moduleapi/VendorsApi~postVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new vendor record
     * This operation creates a new vendor record
     * @param {Object} opts Optional parameters
     * @param {module:model/Vendor} opts.body vendor to add to system
     * @param {String} opts.id 
     * @param {String} opts.vendorName 
     * @param {String} opts.email 
     * @param {String} opts.phoneNumber 
     * @param {module:model/Address} opts.address 
     * @param {module:api/VendorsApi~postVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postVendor(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': opts['id'],'vendorName': opts['vendorName'],'email': opts['email'],'phoneNumber': opts['phoneNumber'],'address': opts['address']
      };

      let authNames = [];
      let contentTypes = ['application/urlencoded', 'application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Vendor;

      return this.apiClient.callApi(
        '/api/store/vendors/newvendor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateVendor operation.
     * @callback moduleapi/VendorsApi~updateVendorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a vendor record
     * This operation updates a vendor record
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/VendorsApi~updateVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling updateVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/vendors/edit/{vendorID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}