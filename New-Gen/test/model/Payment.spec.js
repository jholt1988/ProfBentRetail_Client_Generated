/*
 * Prof Bentley Ecommerce API
 * A Ecommerce API
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProfBentleyEcommerceApi);
  }
}(this, function(expect, ProfBentleyEcommerceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Payment', function() {
      beforeEach(function() {
        instance = new ProfBentleyEcommerceApi.Payment();
      });

      it('should create an instance of Payment', function() {
        // TODO: update the code to test Payment
        expect(instance).to.be.a(ProfBentleyEcommerceApi.Payment);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property orderID (base name: "orderID")', function() {
        // TODO: update the code to test the property orderID
        expect(instance).to.have.property('orderID');
        // expect(instance.orderID).to.be(expectedValueLiteral);
      });

      it('should have the property userID (base name: "userID")', function() {
        // TODO: update the code to test the property userID
        expect(instance).to.have.property('userID');
        // expect(instance.userID).to.be(expectedValueLiteral);
      });

      it('should have the property shippingMethod (base name: "shippingMethod")', function() {
        // TODO: update the code to test the property shippingMethod
        expect(instance).to.have.property('shippingMethod');
        // expect(instance.shippingMethod).to.be(expectedValueLiteral);
      });

      it('should have the property shippingCost (base name: "shippingCost")', function() {
        // TODO: update the code to test the property shippingCost
        expect(instance).to.have.property('shippingCost');
        // expect(instance.shippingCost).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMethod (base name: "paymentMethod")', function() {
        // TODO: update the code to test the property paymentMethod
        expect(instance).to.have.property('paymentMethod');
        // expect(instance.paymentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property billingAddress (base name: "billingAddress")', function() {
        // TODO: update the code to test the property billingAddress
        expect(instance).to.have.property('billingAddress');
        // expect(instance.billingAddress).to.be(expectedValueLiteral);
      });

      it('should have the property billingShippingInfoSame (base name: "billingShippingInfoSame")', function() {
        // TODO: update the code to test the property billingShippingInfoSame
        expect(instance).to.have.property('billingShippingInfoSame');
        // expect(instance.billingShippingInfoSame).to.be(expectedValueLiteral);
      });

      it('should have the property shippingAddress (base name: "shippingAddress")', function() {
        // TODO: update the code to test the property shippingAddress
        expect(instance).to.have.property('shippingAddress');
        // expect(instance.shippingAddress).to.be(expectedValueLiteral);
      });

      it('should have the property cardInfo (base name: "cardInfo")', function() {
        // TODO: update the code to test the property cardInfo
        expect(instance).to.have.property('cardInfo');
        // expect(instance.cardInfo).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedDelivery (base name: "estimatedDelivery")', function() {
        // TODO: update the code to test the property estimatedDelivery
        expect(instance).to.have.property('estimatedDelivery');
        // expect(instance.estimatedDelivery).to.be(expectedValueLiteral);
      });

      it('should have the property orderStatus (base name: "orderStatus")', function() {
        // TODO: update the code to test the property orderStatus
        expect(instance).to.have.property('orderStatus');
        // expect(instance.orderStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
