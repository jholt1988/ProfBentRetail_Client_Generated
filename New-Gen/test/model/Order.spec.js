/*
 * Professor Bentley Electronics Retail API
 * An ecommerce REST API for a retail electronics store. 
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProfessorBentleyElectronicsRetailApi);
  }
}(this, function(expect, ProfessorBentleyElectronicsRetailApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Order', function() {
      beforeEach(function() {
        instance = new ProfessorBentleyElectronicsRetailApi.Order();
      });

      it('should create an instance of Order', function() {
        // TODO: update the code to test Order
        expect(instance).to.be.a(ProfessorBentleyElectronicsRetailApi.Order);
      });

      it('should have the property oid (base name: "oid")', function() {
        // TODO: update the code to test the property oid
        expect(instance).to.have.property('oid');
        // expect(instance.oid).to.be(expectedValueLiteral);
      });

      it('should have the property subtotal (base name: "subtotal")', function() {
        // TODO: update the code to test the property subtotal
        expect(instance).to.have.property('subtotal');
        // expect(instance.subtotal).to.be(expectedValueLiteral);
      });

      it('should have the property tax (base name: "tax")', function() {
        // TODO: update the code to test the property tax
        expect(instance).to.have.property('tax');
        // expect(instance.tax).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property itemsTotal (base name: "itemsTotal")', function() {
        // TODO: update the code to test the property itemsTotal
        expect(instance).to.have.property('itemsTotal');
        // expect(instance.itemsTotal).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryFee (base name: "deliveryFee")', function() {
        // TODO: update the code to test the property deliveryFee
        expect(instance).to.have.property('deliveryFee');
        // expect(instance.deliveryFee).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryId (base name: "deliveryId")', function() {
        // TODO: update the code to test the property deliveryId
        expect(instance).to.have.property('deliveryId');
        // expect(instance.deliveryId).to.be(expectedValueLiteral);
      });

      it('should have the property payId (base name: "payId")', function() {
        // TODO: update the code to test the property payId
        expect(instance).to.have.property('payId');
        // expect(instance.payId).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

      it('should have the property statusId (base name: "statusId")', function() {
        // TODO: update the code to test the property statusId
        expect(instance).to.have.property('statusId');
        // expect(instance.statusId).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "createdOn")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property updatedOn (base name: "updatedOn")', function() {
        // TODO: update the code to test the property updatedOn
        expect(instance).to.have.property('updatedOn');
        // expect(instance.updatedOn).to.be(expectedValueLiteral);
      });

    });
  });

}));
