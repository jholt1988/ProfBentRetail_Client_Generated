/*
 * Professor Bentley Electronics Retail API
 * An ecommerce REST API for a retail electronics store. 
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProfessorBentleyElectronicsRetailApi);
  }
}(this, function(expect, ProfessorBentleyElectronicsRetailApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Product', function() {
      beforeEach(function() {
        instance = new ProfessorBentleyElectronicsRetailApi.Product();
      });

      it('should create an instance of Product', function() {
        // TODO: update the code to test Product
        expect(instance).to.be.a(ProfessorBentleyElectronicsRetailApi.Product);
      });

      it('should have the property pid (base name: "pid")', function() {
        // TODO: update the code to test the property pid
        expect(instance).to.have.property('pid');
        // expect(instance.pid).to.be(expectedValueLiteral);
      });

      it('should have the property productName (base name: "productName")', function() {
        // TODO: update the code to test the property productName
        expect(instance).to.have.property('productName');
        // expect(instance.productName).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property onHandQuantity (base name: "onHandQuantity")', function() {
        // TODO: update the code to test the property onHandQuantity
        expect(instance).to.have.property('onHandQuantity');
        // expect(instance.onHandQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property isFeature (base name: "isFeature")', function() {
        // TODO: update the code to test the property isFeature
        expect(instance).to.have.property('isFeature');
        // expect(instance.isFeature).to.be(expectedValueLiteral);
      });

      it('should have the property catId (base name: "catId")', function() {
        // TODO: update the code to test the property catId
        expect(instance).to.have.property('catId');
        // expect(instance.catId).to.be(expectedValueLiteral);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property vid (base name: "vid")', function() {
        // TODO: update the code to test the property vid
        expect(instance).to.have.property('vid');
        // expect(instance.vid).to.be(expectedValueLiteral);
      });

      it('should have the property createdOn (base name: "createdOn")', function() {
        // TODO: update the code to test the property createdOn
        expect(instance).to.have.property('createdOn');
        // expect(instance.createdOn).to.be(expectedValueLiteral);
      });

      it('should have the property updatedOn (base name: "updatedOn")', function() {
        // TODO: update the code to test the property updatedOn
        expect(instance).to.have.property('updatedOn');
        // expect(instance.updatedOn).to.be(expectedValueLiteral);
      });

    });
  });

}));
