/*
 * Prof Bentley Ecommerce API
 * A Ecommerce API
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {Cart} from '../model/Cart';
import {ComponentsparametersinvoiceID} from '../model/ComponentsparametersinvoiceID';
import {ComponentsparametersproductID} from '../model/ComponentsparametersproductID';
import {Componentsparameterssearchterm} from '../model/Componentsparameterssearchterm';
import {ComponentsparametersvendorID} from '../model/ComponentsparametersvendorID';
import {ExtendedErrorModel} from '../model/ExtendedErrorModel';
import {Invoice} from '../model/Invoice';
import {Product} from '../model/Product';
import {Vendor} from '../model/Vendor';

/**
* Store service.
* @module api/StoreApi
* @version 1.5
*/
export class StoreApi {

    /**
    * Constructs a new StoreApi. 
    * @alias module:api/StoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteInvoice operation.
     * @callback moduleapi/StoreApi~deleteInvoiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Invoice 
     * This operation deletes invoice record with matching ID
     * @param {module:model/ComponentsparametersinvoiceID} invoiceID 
     * @param {module:api/StoreApi~deleteInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvoice(invoiceID, callback) {
      
      let postBody = null;
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling deleteInvoice");
      }

      let pathParams = {
        'invoiceID': invoiceID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/inventory/invoices/delete/{invoiceID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProduct operation.
     * @callback moduleapi/StoreApi~deleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete product record
     * This operation deletes a product record
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/StoreApi~deleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling deleteProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/products/delete/{productID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteVendor operation.
     * @callback moduleapi/StoreApi~deleteVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Vendor
     * This operation deletes a vendor records
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/StoreApi~deleteVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling deleteVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/vendors/delete/{vendorID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filterProducts operation.
     * @callback moduleapi/StoreApi~filterProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get filtered product data
     * This operations gets filtered product data
     * @param {module:api/StoreApi~filterProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filterProducts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/products/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllInventory operation.
     * @callback moduleapi/StoreApi~getAllInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all inventory data
     * This operation gets all inventory data
     * @param {module:api/StoreApi~getAllInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllInventory(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllProducts operation.
     * @callback moduleapi/StoreApi~getAllProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cart>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all products
     * This operation retrieves all products data
     * @param {module:api/StoreApi~getAllProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllProducts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Cart];

      return this.apiClient.callApi(
        '/api/store/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllVendors operation.
     * @callback moduleapi/StoreApi~getAllVendorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vendor>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all vendors
     * This operation gets all vendors data
     * @param {module:api/StoreApi~getAllVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllVendors(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Vendor];

      return this.apiClient.callApi(
        '/api/store/vendors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback moduleapi/StoreApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product record
     * This operation retrieves a product record with matching id
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/StoreApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling getProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/store/products/{productID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVendor operation.
     * @callback moduleapi/StoreApi~getVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vendor 
     * This operation retrieves a vendor record with matching ID
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/StoreApi~getVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling getVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vendor;

      return this.apiClient.callApi(
        '/api/store/vendors/{vendorID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postInvoice operation.
     * @callback moduleapi/StoreApi~postInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoice{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post new invoice 
     * This operation creates a new invoice record 
     * @param {module:api/StoreApi~postInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postInvoice(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invoice;

      return this.apiClient.callApi(
        '/api/store/inventory/invoices/newinvoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postProduct operation.
     * @callback moduleapi/StoreApi~postProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product record
     * This operation creates a new product record
     * @param {Object} opts Optional parameters
     * @param {module:model/Product} opts.body product to add to system
     * @param {String} opts.id 
     * @param {String} opts.productName 
     * @param {Number} opts.price 
     * @param {String} opts.description 
     * @param {Number} opts.inventoryQuantity 
     * @param {String} opts.category 
     * @param {Boolean} opts.isFeatured 
     * @param {String} opts.vendorId 
     * @param {Array.<Blob>} opts.image 
     * @param {String} opts.unit 
     * @param {Date} opts.createdOn 
     * @param {Date} opts.updatedOn 
     * @param {module:api/StoreApi~postProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postProduct(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': opts['id'],'productName': opts['productName'],'price': opts['price'],'description': opts['description'],'inventoryQuantity': opts['inventoryQuantity'],'category': opts['category'],'isFeatured': opts['isFeatured'],'vendorId': opts['vendorId'],'image': this.apiClient.buildCollectionParam(opts['image'], 'multi'),'unit': opts['unit'],'createdOn': opts['createdOn'],'updatedOn': opts['updatedOn']
      };

      let authNames = [];
      let contentTypes = ['application/urlencoded', 'application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Product;

      return this.apiClient.callApi(
        '/api/store/newproduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postVendor operation.
     * @callback moduleapi/StoreApi~postVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vendor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a new vendor record
     * This operation creates a new vendor record
     * @param {Object} opts Optional parameters
     * @param {module:model/Vendor} opts.body vendor to add to system
     * @param {String} opts.id 
     * @param {String} opts.vendorName 
     * @param {String} opts.email 
     * @param {String} opts.phoneNumber 
     * @param {module:model/Address} opts.address 
     * @param {module:api/StoreApi~postVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postVendor(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': opts['id'],'vendorName': opts['vendorName'],'email': opts['email'],'phoneNumber': opts['phoneNumber'],'address': opts['address']
      };

      let authNames = [];
      let contentTypes = ['application/urlencoded', 'application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Vendor;

      return this.apiClient.callApi(
        '/api/store/vendors/newvendor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchStore operation.
     * @callback moduleapi/StoreApi~searchStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search records in store
     * This operation allows user to search store records by search term and catergory
     * @param {module:model/Componentsparameterssearchterm} searchterm 
     * @param {String} category 
     * @param {module:api/StoreApi~searchStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchStore(searchterm, category, callback) {
      
      let postBody = null;
      // verify the required parameter 'searchterm' is set
      if (searchterm === undefined || searchterm === null) {
        throw new Error("Missing the required parameter 'searchterm' when calling searchStore");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling searchStore");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'searchterm': searchterm,'category': category
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/store/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateInventory operation.
     * @callback moduleapi/StoreApi~updateInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update inventory record
     * This operation let you edit inventory
     * @param {module:api/StoreApi~updateInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateInventory(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/edit/inventory', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateInvoice operation.
     * @callback moduleapi/StoreApi~updateInvoiceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update invoice record
     * This operation updates a invoice record with matching id
     * @param {module:model/ComponentsparametersinvoiceID} invoiceID 
     * @param {module:api/StoreApi~updateInvoiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateInvoice(invoiceID, callback) {
      
      let postBody = null;
      // verify the required parameter 'invoiceID' is set
      if (invoiceID === undefined || invoiceID === null) {
        throw new Error("Missing the required parameter 'invoiceID' when calling updateInvoice");
      }

      let pathParams = {
        'invoiceID': invoiceID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/inventory/invoices/edit/{invoiceID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProduct operation.
     * @callback moduleapi/StoreApi~updateProductCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product record
     * This operation updates a product record
     * @param {module:model/ComponentsparametersproductID} productID 
     * @param {module:api/StoreApi~updateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateProduct(productID, callback) {
      
      let postBody = null;
      // verify the required parameter 'productID' is set
      if (productID === undefined || productID === null) {
        throw new Error("Missing the required parameter 'productID' when calling updateProduct");
      }

      let pathParams = {
        'productID': productID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/products/edit/{productID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateVendor operation.
     * @callback moduleapi/StoreApi~updateVendorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a vendor record
     * This operation updates a vendor record
     * @param {module:model/ComponentsparametersvendorID} vendorID 
     * @param {module:api/StoreApi~updateVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateVendor(vendorID, callback) {
      
      let postBody = null;
      // verify the required parameter 'vendorID' is set
      if (vendorID === undefined || vendorID === null) {
        throw new Error("Missing the required parameter 'vendorID' when calling updateVendor");
      }

      let pathParams = {
        'vendorID': vendorID
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Product];

      return this.apiClient.callApi(
        '/api/store/vendors/edit/{vendorID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}