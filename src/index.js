/*
 * Professor Bentley Electronics Retail API
 * An ecommerce REST API for a retail electronics store. 
 *
 * OpenAPI spec version: 1.1
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {Address} from './model/Address';
import {Cart} from './model/Cart';
import {CartItems} from './model/CartItems';
import {Category} from './model/Category';
import {Delivery} from './model/Delivery';
import {ErrorModel} from './model/ErrorModel';
import {ExtendedErrorModel} from './model/ExtendedErrorModel';
import {InlineResponse200} from './model/InlineResponse200';
import {InlineResponse404} from './model/InlineResponse404';
import {Method} from './model/Method';
import {Order} from './model/Order';
import {OrderItems} from './model/OrderItems';
import {Payment} from './model/Payment';
import {Product} from './model/Product';
import {Status} from './model/Status';
import {Type} from './model/Type';
import {User} from './model/User';
import {UserAddress} from './model/UserAddress';
import {Vendor} from './model/Vendor';
import {CartApi} from './api/CartApi';
import {CheckoutApi} from './api/CheckoutApi';
import {OrdersApi} from './api/OrdersApi';
import {ProductsApi} from './api/ProductsApi';
import {StoreApi} from './api/StoreApi';
import {UsersApi} from './api/UsersApi';
import {VendorsApi} from './api/VendorsApi';

/**
* An_ecommerce_REST_API_for_a_retail_electronics_store__.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ProfessorBentleyElectronicsRetailApi = require('index'); // See note below*.
* var xxxSvc = new ProfessorBentleyElectronicsRetailApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ProfessorBentleyElectronicsRetailApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ProfessorBentleyElectronicsRetailApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ProfessorBentleyElectronicsRetailApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The Cart model constructor.
     * @property {module:model/Cart}
     */
    Cart,

    /**
     * The CartItems model constructor.
     * @property {module:model/CartItems}
     */
    CartItems,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The Delivery model constructor.
     * @property {module:model/Delivery}
     */
    Delivery,

    /**
     * The ErrorModel model constructor.
     * @property {module:model/ErrorModel}
     */
    ErrorModel,

    /**
     * The ExtendedErrorModel model constructor.
     * @property {module:model/ExtendedErrorModel}
     */
    ExtendedErrorModel,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse404 model constructor.
     * @property {module:model/InlineResponse404}
     */
    InlineResponse404,

    /**
     * The Method model constructor.
     * @property {module:model/Method}
     */
    Method,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderItems model constructor.
     * @property {module:model/OrderItems}
     */
    OrderItems,

    /**
     * The Payment model constructor.
     * @property {module:model/Payment}
     */
    Payment,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The Type model constructor.
     * @property {module:model/Type}
     */
    Type,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserAddress model constructor.
     * @property {module:model/UserAddress}
     */
    UserAddress,

    /**
     * The Vendor model constructor.
     * @property {module:model/Vendor}
     */
    Vendor,

    /**
    * The CartApi service constructor.
    * @property {module:api/CartApi}
    */
    CartApi,

    /**
    * The CheckoutApi service constructor.
    * @property {module:api/CheckoutApi}
    */
    CheckoutApi,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The ProductsApi service constructor.
    * @property {module:api/ProductsApi}
    */
    ProductsApi,

    /**
    * The StoreApi service constructor.
    * @property {module:api/StoreApi}
    */
    StoreApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi,

    /**
    * The VendorsApi service constructor.
    * @property {module:api/VendorsApi}
    */
    VendorsApi
};
