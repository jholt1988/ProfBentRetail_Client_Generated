/*
 * Prof Bentley Ecommerce API
 * A Ecommerce API
 *
 * OpenAPI spec version: 1.5
 * Contact: jordanh316@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProfBentleyEcommerceApi);
  }
}(this, function(expect, ProfBentleyEcommerceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Invoice', function() {
      beforeEach(function() {
        instance = new ProfBentleyEcommerceApi.Invoice();
      });

      it('should create an instance of Invoice', function() {
        // TODO: update the code to test Invoice
        expect(instance).to.be.a(ProfBentleyEcommerceApi.Invoice);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property vendorID (base name: "vendorID")', function() {
        // TODO: update the code to test the property vendorID
        expect(instance).to.have.property('vendorID');
        // expect(instance.vendorID).to.be(expectedValueLiteral);
      });

      it('should have the property recieveDate (base name: "recieveDate")', function() {
        // TODO: update the code to test the property recieveDate
        expect(instance).to.have.property('recieveDate');
        // expect(instance.recieveDate).to.be(expectedValueLiteral);
      });

      it('should have the property terms (base name: "terms")', function() {
        // TODO: update the code to test the property terms
        expect(instance).to.have.property('terms');
        // expect(instance.terms).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "dueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property items (base name: "items")', function() {
        // TODO: update the code to test the property items
        expect(instance).to.have.property('items');
        // expect(instance.items).to.be(expectedValueLiteral);
      });

      it('should have the property taxRate (base name: "taxRate")', function() {
        // TODO: update the code to test the property taxRate
        expect(instance).to.have.property('taxRate');
        // expect(instance.taxRate).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceBalance (base name: "invoiceBalance")', function() {
        // TODO: update the code to test the property invoiceBalance
        expect(instance).to.have.property('invoiceBalance');
        // expect(instance.invoiceBalance).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNetTotal (base name: "invoiceNetTotal")', function() {
        // TODO: update the code to test the property invoiceNetTotal
        expect(instance).to.have.property('invoiceNetTotal');
        // expect(instance.invoiceNetTotal).to.be(expectedValueLiteral);
      });

      it('should have the property dateEntered (base name: "dateEntered")', function() {
        // TODO: update the code to test the property dateEntered
        expect(instance).to.have.property('dateEntered');
        // expect(instance.dateEntered).to.be(expectedValueLiteral);
      });

      it('should have the property dateModified (base name: "dateModified")', function() {
        // TODO: update the code to test the property dateModified
        expect(instance).to.have.property('dateModified');
        // expect(instance.dateModified).to.be(expectedValueLiteral);
      });

      it('should have the property datePaid (base name: "datePaid")', function() {
        // TODO: update the code to test the property datePaid
        expect(instance).to.have.property('datePaid');
        // expect(instance.datePaid).to.be(expectedValueLiteral);
      });

      it('should have the property paymentType (base name: "paymentType")', function() {
        // TODO: update the code to test the property paymentType
        expect(instance).to.have.property('paymentType');
        // expect(instance.paymentType).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

    });
  });

}));
